{"version":3,"sources":["screens/ContactsListScreen/ContactsListScreen.module.css","components/Form/Form.module.css","screens/ContactInfoScreen/ContactInfoScreen.module.css","components/Modal/Modal.module.css","components/AddEditForm/AddEditForm.module.css","components/Header/Header.module.css","components/Footer/Footer.module.css","components/AddContact/AddContact.module.css","components/Snackbar/Snackbar.module.css","components/ScrollTop/ScrollTop.module.css","components/Container/Container.module.css","store/contactsSlice.js","store/index.js","components/Header/Header.jsx","components/Footer/Footer.jsx","utils/utils.js","components/Container/Container.jsx","components/Modal/Modal.jsx","components/Form/Form.jsx","components/AddContact/AddContact.jsx","components/AddEditForm/AddEditForm.jsx","components/Snackbar/Snackbar.jsx","components/ScrollTop/ScrollTop.jsx","components/Icons/IconShevronUp.jsx","screens/ContactInfoScreen/ContactInfoScreen.jsx","screens/ContactsListScreen/ContactsListScreen.jsx","Router.js","App.js","index.js"],"names":["module","exports","launchSnackbar","createAsyncThunk","snackbarParams","message","options","duration","position","manualClose","dispatch","setUpSnackbar","setTimeout","openSnackbar","closeSnackbar","contactsList","localStorage","getItem","JSON","parse","contactsSlice","createSlice","name","initialState","isModalOpen","modal1","modal2","modal3","modal4","modal5","modal6","isModalAcceptBtnDissabled","isSaveBtnDissabled","isUndoBtnDissabled","isRedoBtnDissabled","addContactInfo","surname","email","phone","isInputsValid","additionalFields","additionalFieldTitle","additionalFieldValue","additionalFieldType","currentFieldKey","isFieldExist","currentContact","currentContactHistory","prev","current","next","isContactsSelected","some","all","snackbar","width","height","positions","isActive","scrollBarWidth","reducers","changeModalStatus","state","action","payload","key","modalStatus","changeModalAcceptBtnStatus","acceptBtnStatus","changeSaveBtnStatus","saveBtnStatus","changeUndoBtnStatus","undoBtnStatus","changeRedoBtnStatus","redoBtnStatus","value","addCurrentContactInfo","clearContactInfo","Object","keys","forEach","changePhoneValid","changeEmailValid","changeFieldExistStatus","fieldExistStatus","addFieldTitle","addFieldValue","setAddFieldType","clrAddFieldValues","setCurrentFieldKey","addFieldToForm","filter","el","fieldTitle","length","push","fieldValue","addFieldToCurrentContact","editCurrentContactField","fieldCurrentTitle","fieldNewTitle","newCurrentContact","deleteFieldFromForm","deleteFieldFromCurrentContact","addContact","contactInfo","id","uuid","selected","entries","setCurrentContact","contact","contactId","updateContact","map","deleteContact","setContactSelected","setAllContactsSelected","resetSelectedContacts","changeIsContactsSelected","deleteSelectedContacts","initCurrentContactStateHistory","changeCurrentContactStateHistory","undoCurrentContactStateHistory","unshift","pop","redoCurrentContactStateHistory","shift","resetCurrentContactStateHistory","includes","setSnackbarWidth","setSnackbarHeight","setScrollBarWidth","actions","configureStore","reducer","contacts","Header","className","styles","wrapper","title","Footer","copyright","getScrollBarWidth","outer","document","createElement","style","top","overflow","visibility","body","appendChild","offsetWidth","clientWidth","removeChild","formValidator","isEmailValid","isPhoneValid","emailValidator","isValid","test","trim","toLowerCase","phoneValidator","addFieldEmailValidator","addFieldPhoneValidator","getFieldType","fieldTitleLowerCase","Container","children","reduxDispatch","useDispatch","useSelector","useEffect","stringify","localStorageSet","windowResizeHandler","window","addEventListener","removeEventListener","values","offsetHeight","documentElement","clientHeight","getElementById","paddingRight","marginRight","container","Modal","isModalActive","modalKey","modalTitle","acceptBtnHandler","acceptBtnTitle","rejectBtnHandler","rejectBtnTitle","closeModalHandler","componentUnmountFunc","modalWrapper","modal","modalHeader","btnClose","onClick","closeSymb","modalContent","hrLine","modalFooter","btn","disabled","btnDanger","modalLayout","defaultProps","Form","clearAddFieldValues","useCallback","formWrapper","label","input","type","placeholder","onChange","e","target","data-is-valid","data-is-empty","additionalField","addInputsWrapper","preventDefault","AddContact","AddEditForm","fieldType","data-is-uniq","Snackbar","measuredRef","node","hideStyles","Map","bottom","left","right","ref","data-is-active","data-position","data-manual-close","get","ScrollTop","useState","isScrollingDown","setScrollingDown","rectOfParrentNode","parentElement","getBoundingClientRect","onScroll","scrollTop","scrollTopBtn","scrollTo","behavior","color","IconShevronUp","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","ContactInfoScreen","history","contactFromList","controlsWrapper","contactInfoInput","readOnly","btnWrapper","ContactsListScreen","allSelected","someSelected","selectedContactsList","selectBtns","idx","contactInfoWrapper","contactName","contactContacts","checkbox","checked","checkboxLabel","htmlFor","RouterView","exact","path","component","App","ReactDOM","render","StrictMode","store","basename","process"],"mappings":"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","file":"static/js/main.51b555fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactsListScreen_wrapper__3XIGz\",\"controlsWrapper\":\"ContactsListScreen_controlsWrapper__1rOQo\",\"selectBtns\":\"ContactsListScreen_selectBtns__2WBGj\",\"title\":\"ContactsListScreen_title__EGcGC\",\"contactInfoWrapper\":\"ContactsListScreen_contactInfoWrapper__JBjgG\",\"contactsList\":\"ContactsListScreen_contactsList__2W7xX\",\"contactInfo\":\"ContactsListScreen_contactInfo__1tTm2\",\"contactName\":\"ContactsListScreen_contactName__1mQB5\",\"btnWrapper\":\"ContactsListScreen_btnWrapper__3RJ03\",\"btn\":\"ContactsListScreen_btn__2Myau\",\"btnDanger\":\"ContactsListScreen_btnDanger__1lg3h\",\"checkboxWrapper\":\"ContactsListScreen_checkboxWrapper__3uaw4\",\"checkbox\":\"ContactsListScreen_checkbox__1udTe\",\"checkboxLabel\":\"ContactsListScreen_checkboxLabel__3XgBm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Form_input__3LgOg\",\"label\":\"Form_label__FThOM\",\"addInputsWrapper\":\"Form_addInputsWrapper__MeRi2\",\"btn\":\"Form_btn__EVPu9\",\"btnClose\":\"Form_btnClose__IfCvz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactInfoScreen_wrapper__oebLu\",\"title\":\"ContactInfoScreen_title__1UjKN\",\"contactInfoInput\":\"ContactInfoScreen_contactInfoInput__LPJUa\",\"input\":\"ContactInfoScreen_input__3KoST\",\"label\":\"ContactInfoScreen_label__2Duhn\",\"addInputsWrapper\":\"ContactInfoScreen_addInputsWrapper__1Wyxf\",\"btnWrapper\":\"ContactInfoScreen_btnWrapper__2u9OI\",\"btn\":\"ContactInfoScreen_btn__30LDN\",\"btnDanger\":\"ContactInfoScreen_btnDanger__2fhC1\",\"hrLine\":\"ContactInfoScreen_hrLine__12oZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"Modal_modalWrapper__HUGkH\",\"modalLayout\":\"Modal_modalLayout__kgb6f\",\"modal\":\"Modal_modal__2oWmv\",\"modalHeader\":\"Modal_modalHeader__fLnld\",\"btnClose\":\"Modal_btnClose__2jxFz\",\"modalContent\":\"Modal_modalContent__ihB4q\",\"modalFooter\":\"Modal_modalFooter__3KCCS\",\"btn\":\"Modal_btn__3enbk\",\"btnDanger\":\"Modal_btnDanger__2ZznK\",\"hrLine\":\"Modal_hrLine__15lgN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"AddEditForm_input__UnkHj\",\"label\":\"AddEditForm_label__1ySHb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__1FR73\",\"title\":\"Header_title__1DIgP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Footer_wrapper__3F8OW\",\"copyright\":\"Footer_copyright__1tMai\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"AddContact_btn__1_xGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Snackbar_container__3blN-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scrollTopBtn\":\"ScrollTop_scrollTopBtn__1RvwU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__aDftz\"};","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\n\nexport const launchSnackbar = createAsyncThunk(\n  'serj/launchSnackbar',\n  (\n    snackbarParams = {\n      message: 'Hello world!',\n      options: {\n        duration: 3000,\n        position: 'top',\n        manualClose: false,\n      },\n    }, { dispatch } ) => {\n    dispatch(setUpSnackbar(snackbarParams));\n    setTimeout(() => {\n      dispatch(openSnackbar());\n    }, 350);\n    setTimeout(() => {\n      dispatch(closeSnackbar());\n    }, snackbarParams.options.duration);\n  });\n\nconst contactsList = localStorage.getItem('contacts') ? JSON.parse(localStorage.getItem('contacts')) : [];\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n\n  initialState: {\n    isModalOpen: {\n      modal1: false,\n      modal2: false,\n      modal3: false,\n      modal4: false,\n      modal5: false,\n      modal6: false,\n    },\n    isModalAcceptBtnDissabled: {\n      modal1: true,\n      modal2: true,\n      modal3: true,\n      modal4: true,\n      modal5: true,\n      modal6: true,\n    },\n    isSaveBtnDissabled: true,\n    isUndoBtnDissabled: true,\n    isRedoBtnDissabled: true,\n    addContactInfo: {\n      name: '',\n      surname: '',\n      email: '',\n      phone: '',\n    },\n    isInputsValid: {\n      phone: false,\n      email: false,\n    },\n    additionalFields: [],\n    additionalFieldTitle: '',\n    additionalFieldValue: '',\n    additionalFieldType: '',\n    currentFieldKey: '',\n    isFieldExist: false,\n    contactsList,\n    currentContact: {},\n    currentContactHistory: {\n      prev: [],\n      current: null,\n      next: [],\n    },\n    isContactsSelected: {\n      some: false,\n      all: false,\n    },\n    snackbar: {\n      message: 'Hello world!',\n      options: {\n        duration: 3000,\n        position: 'top',\n        manualClose: false,\n      },\n      width: 0,\n      height: 0,\n      positions: ['top', 'bottom', 'left', 'right'],\n      isActive: false,\n    },\n    scrollBarWidth: null,\n  },\n\n  reducers: {\n    changeModalStatus(state, action) {\n      state.isModalOpen[action.payload.key] = action.payload.modalStatus;\n    },\n\n    changeModalAcceptBtnStatus(state, action) {\n      state.isModalAcceptBtnDissabled[action.payload.key] = action.payload.acceptBtnStatus;\n    },\n\n    changeSaveBtnStatus(state, action) {\n      state.isSaveBtnDissabled = action.payload.saveBtnStatus;\n    },\n\n    changeUndoBtnStatus(state, action) {\n      state.isUndoBtnDissabled = action.payload.undoBtnStatus;\n    },\n\n    changeRedoBtnStatus(state, action) {\n      state.isRedoBtnDissabled = action.payload.redoBtnStatus;\n    },\n\n    addContactInfo(state, action) {\n      state.addContactInfo[action.payload.name] = action.payload.value;\n    },\n\n    addCurrentContactInfo(state, action) {\n      state.currentContact[action.payload.name] = action.payload.value;\n    },\n\n    clearContactInfo(state) {\n      Object.keys(state.addContactInfo).forEach(key => state.addContactInfo[key] = '');\n    },\n\n    changePhoneValid(state, action) {\n      state.isInputsValid.phone = action.payload.phone;\n      state.isModalAcceptBtnDissabled[action.payload.key] = action.payload.acceptBtnStatus;\n    },\n\n    changeEmailValid(state, action) {\n      state.isInputsValid.email = action.payload.email;\n      state.isModalAcceptBtnDissabled[action.payload.key] = action.payload.acceptBtnStatus;\n    },\n\n    changeFieldExistStatus(state, action) {\n      state.isFieldExist = action.payload.fieldExistStatus;\n    },\n\n    addFieldTitle(state, action) {\n      state.additionalFieldTitle = action.payload.additionalFieldTitle;\n    },\n\n    addFieldValue(state, action) {\n      state.additionalFieldValue = action.payload.additionalFieldValue;\n    },\n\n    setAddFieldType(state, action) {\n      state.additionalFieldType = action.payload.additionalFieldType;\n    },\n\n    clrAddFieldValues(state) {\n      state.additionalFieldTitle = '';\n      state.additionalFieldValue = '';\n    },\n\n    setCurrentFieldKey(state, action) {\n      state.currentFieldKey = action.payload.currentFieldKey;\n    },\n\n    addFieldToForm(state, action) {\n      if (!state.additionalFields.filter(el => el === action.payload.fieldTitle).length) {\n        state.additionalFields.push(action.payload.fieldTitle);\n        state.addContactInfo[action.payload.fieldTitle] = action.payload.fieldValue;\n      }\n    },\n\n    addFieldToCurrentContact(state, action) {\n      state.currentContact[action.payload.fieldTitle] = action.payload.fieldValue;\n    },\n\n    editCurrentContactField(state, action) {\n      if (action.payload.fieldCurrentTitle !== action.payload.fieldNewTitle) {\n        const newCurrentContact = {};\n\n        Object.keys(state.currentContact).forEach(key => {\n          const value = state.currentContact[key];\n\n          if (key === action.payload.fieldCurrentTitle) {\n            newCurrentContact[action.payload.fieldNewTitle] = value;\n          } else {\n            newCurrentContact[key] = value;\n          }\n        });\n        state.currentContact = newCurrentContact;\n      }\n      state.currentContact[action.payload.fieldNewTitle] = action.payload.fieldValue;\n    },\n\n    deleteFieldFromForm(state, action) {\n      state.additionalFields = state.additionalFields.filter(el => el !== action.payload.key);\n      delete state.addContactInfo[action.payload.key];\n    },\n\n    deleteFieldFromCurrentContact(state, action) {\n      delete state.currentContact[action.payload.key];\n    },\n\n    addContact(state) {\n      const contactInfo = { id: uuid(), selected: false };\n      Object.entries(state.addContactInfo).forEach(([key, value]) => contactInfo[key] = value);\n      state.contactsList.push(contactInfo);\n    },\n\n    setCurrentContact(state, action) {\n      state.currentContact = state.contactsList.filter(contact => contact.id === action.payload.contactId)[0];\n    },\n\n    updateContact(state) {\n      state.contactsList = state.contactsList.map(contact => {\n        return contact.id === state.currentContact.id ? contact = state.currentContact : contact;\n      });\n    },\n\n    deleteContact(state, action) {\n      state.contactsList = state.contactsList.filter(contact => contact.id !== action.payload.contactId);\n    },\n\n    setContactSelected(state, action) {\n      state.contactsList = state.contactsList.map(contact => {\n        return contact.id === action.payload.contactId ? { ...contact, selected: !contact.selected } : contact;\n      });\n    },\n\n    setAllContactsSelected(state) {\n      state.contactsList = state.contactsList.map(contact => {\n        return { ...contact, selected: true };\n      });\n    },\n\n    resetSelectedContacts(state) {\n      state.contactsList = state.contactsList.map(contact => {\n        return contact.selected ? { ...contact, selected: false } : contact;\n      });\n      if (state.isContactsSelected.some) state.isContactsSelected.some = false;\n      if (state.isContactsSelected.all) state.isContactsSelected.all = false;\n    },\n\n    changeIsContactsSelected(state, action) {\n      state.isContactsSelected[action.payload.key] = action.payload.value;\n    },\n\n    deleteSelectedContacts(state) {\n      state.contactsList = state.contactsList.filter(contact => contact.selected !== true);\n    },\n\n    initCurrentContactStateHistory(state) {\n      state.currentContactHistory.current = state.currentContact;\n    },\n\n    changeCurrentContactStateHistory(state) {\n      state.currentContactHistory.prev.push(state.currentContactHistory.current);\n      state.currentContactHistory.current = state.currentContact;\n      if (state.currentContactHistory.next.length) {\n        state.currentContactHistory.next = [];\n        state.isRedoBtnDissabled = true;\n      }\n    },\n\n    undoCurrentContactStateHistory(state) {\n      state.currentContactHistory.next.unshift(state.currentContactHistory.current);\n      state.currentContactHistory.current = state.currentContactHistory.prev.pop();\n      state.currentContact = state.currentContactHistory.current;\n      if (!state.currentContactHistory.prev.length) state.isUndoBtnDissabled = true;\n    },\n\n    redoCurrentContactStateHistory(state) {\n      state.currentContactHistory.prev.push(state.currentContactHistory.current);\n      state.currentContactHistory.current = state.currentContactHistory.next.shift();\n      state.currentContact = state.currentContactHistory.current;\n      if (!state.currentContactHistory.next.length) state.isRedoBtnDissabled = true;\n    },\n\n    resetCurrentContactStateHistory(state) {\n      state.currentContactHistory = {\n        prev: [],\n        current: null,\n        next: [],\n      };\n      state.isSaveBtnDissabled = true;\n      state.isUndoBtnDissabled = true;\n      state.isRedoBtnDissabled = true;\n    },\n\n    setUpSnackbar(state, action) {\n      if (typeof(action.payload.options.duration) !== 'number' || action.payload.options.duration < 3000) action.payload.options.duration = 3000;\n      if (action.payload.options.duration > 15000) action.payload.options.manualClose = true;\n      if (!state.snackbar.positions.includes(action.payload.options.position)) action.payload.options.position = 'top';\n      if (typeof(action.payload.options.manualClose) !== 'boolean') action.payload.options.manualClose = false;\n      state.snackbar.message = action.payload.message;\n      state.snackbar.options = action.payload.options;\n    },\n\n    openSnackbar(state) {\n      state.snackbar.isActive = true;\n    },\n\n    closeSnackbar(state) {\n      state.snackbar.isActive = false;\n    },\n\n    setSnackbarWidth(state, action) {\n      state.snackbar.width = action.payload.width;\n    },\n\n    setSnackbarHeight(state, action) {\n      state.snackbar.height = action.payload.height;\n    },\n\n    setScrollBarWidth(state, action) {\n      state.scrollBarWidth = action.payload.scrollBarWidth;\n    },\n  },\n\n});\n\nexport const {\n  changeModalStatus,\n  changeModalAcceptBtnStatus,\n  changeSaveBtnStatus,\n  changeUndoBtnStatus,\n  changeRedoBtnStatus,\n  addContactInfo,\n  addCurrentContactInfo,\n  clearContactInfo,\n  changePhoneValid,\n  changeEmailValid,\n  changeFieldExistStatus,\n  addFieldTitle,\n  addFieldValue,\n  setAddFieldType,\n  clrAddFieldValues,\n  addFieldToForm,\n  addFieldToCurrentContact,\n  setCurrentFieldKey,\n  editCurrentContactField,\n  deleteFieldFromForm,\n  deleteFieldFromCurrentContact,\n  addContact,\n  setCurrentContact,\n  setContactSelected,\n  setAllContactsSelected,\n  changeIsContactsSelected,\n  resetSelectedContacts,\n  updateContact,\n  deleteContact,\n  deleteSelectedContacts,\n  initCurrentContactStateHistory,\n  changeCurrentContactStateHistory,\n  undoCurrentContactStateHistory,\n  redoCurrentContactStateHistory,\n  resetCurrentContactStateHistory,\n  setUpSnackbar,\n  openSnackbar,\n  closeSnackbar,\n  setSnackbarWidth,\n  setSnackbarHeight,\n  setScrollBarWidth,\n} = contactsSlice.actions;\n\nexport default contactsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport contactsSlice from './contactsSlice';\n\nexport default configureStore({\n  reducer: {\n    contacts: contactsSlice,\n  },\n});\n","import styles from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header id='header'>\n      <div className={styles.wrapper}>\n        <h1 className={styles.title}>Contacts List App</h1>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import styles from './Footer.module.css';\n\nfunction Footer() {\n  return(\n    <footer id='footer'>\n      <div className={styles.wrapper}>\n        <span className={styles.copyright}>Designed by Serj-L 2021</span>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","export const getScrollBarWidth = () => {\n  const outer = document.createElement('div');\n  outer.style.position = 'adsolute';\n  outer.style.top = '-9999px';\n  outer.style.width = '50px';\n  outer.style.height = '50px';\n  outer.style.overflow = 'scroll';\n  outer.style.visibility = 'hidden';\n  document.body.appendChild(outer);\n  const scrollBarWidth = outer.offsetWidth - outer.clientWidth;\n  document.body.removeChild(outer);\n\n  return scrollBarWidth;\n};\n\nexport const formValidator = (name, email, phone, isEmailValid, isPhoneValid) => {\n  return (name && (!email && !phone)) || (isEmailValid && !phone) || (isPhoneValid && !email) || (isEmailValid && isPhoneValid) ? false : true;\n};\n\nexport const emailValidator = (email, phone, isPhoneValid, name, surname, key) => {\n  const isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email.trim().toLowerCase());\n  return {\n    email: isValid,\n    key,\n    acceptBtnStatus: (isValid && !phone) || (isPhoneValid && !email) || (isValid && isPhoneValid) || ((!email && !phone) && (name || surname)) ? false : true,\n  };\n};\n\nexport const phoneValidator = (phone, email, isEmailValid, name, surname, key) => {\n  const isValid = /(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?/.test(phone.trim());\n  return {\n    phone: isValid,\n    key,\n    acceptBtnStatus: (isValid && !email) || (isEmailValid && !phone) || (isValid && isEmailValid) || ((!phone && !email) && (name || surname)) ? false : true,\n  };\n};\n\nexport const addFieldEmailValidator = (email, key, fieldTitle, isFieldExist) => {\n  const isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email.trim().toLowerCase());\n  return {\n    email: isValid,\n    key,\n    acceptBtnStatus: (!email || isValid) && fieldTitle && !isFieldExist ? false : true,\n  };\n};\n\nexport const addFieldPhoneValidator = (phone, key, fieldTitle, isFieldExist) => {\n  const isValid = /(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?/.test(phone.trim());\n  return {\n    phone: isValid,\n    key,\n    acceptBtnStatus: (!phone || isValid) && fieldTitle && !isFieldExist ? false : true,\n  };\n};\n\nexport const getFieldType = (fieldTitle) => {\n  const fieldTitleLowerCase = fieldTitle.toLowerCase();\n  if (fieldTitleLowerCase.includes('email') || fieldTitleLowerCase.includes('e-mail') || fieldTitleLowerCase.includes('e mail')) return 'email';\n  if (fieldTitleLowerCase.includes('phone')) return 'phone';\n  return 'other';\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setScrollBarWidth } from '../../store/contactsSlice';\n\nimport { Snackbar } from '../../components';\nimport { getScrollBarWidth } from '../../utils/utils';\n\nimport styles from './Container.module.css';\n\nfunction localStorageSet(value = [], key = 'contacts') {\n  localStorage[key] = JSON.stringify(value);\n}\n\nconst Container = ({ children }) => {\n  const reduxDispatch = useDispatch();\n  const contactsList = useSelector((state) => state.contacts.contactsList);\n  const isModalOpen = useSelector((state) => state.contacts.isModalOpen);\n  const scrollBarWidth = useSelector((state) => state.contacts.scrollBarWidth);\n\n  useEffect(() => {\n    localStorageSet(contactsList);\n  }, [contactsList]);\n\n  useEffect(() => {\n    const windowResizeHandler = () => reduxDispatch(setScrollBarWidth({ scrollBarWidth: `${getScrollBarWidth()}px` }));\n\n    reduxDispatch(setScrollBarWidth({ scrollBarWidth: `${getScrollBarWidth()}px` }));\n    window.addEventListener('resize', windowResizeHandler);\n\n    return () => window.removeEventListener('resize', windowResizeHandler);\n  }, [reduxDispatch]);\n\n  useEffect(() => {\n    if (Object.values(isModalOpen).filter(value => value === true).length) {\n      document.body.style.overflow = 'hidden';\n      if (document.body.offsetHeight > document.documentElement.clientHeight) {\n        document.getElementById('container').style.paddingRight = scrollBarWidth;\n        document.getElementById('header').style.paddingRight = scrollBarWidth;\n        document.getElementById('footer').style.paddingRight = scrollBarWidth;\n        document.getElementById('scrollTopBtn').style.marginRight = scrollBarWidth;\n      }\n    } else {\n      document.body.style.overflow = 'auto';\n      if (document.body.offsetHeight > document.documentElement.clientHeight) {\n        document.getElementById('container').style.paddingRight = '';\n        document.getElementById('header').style.paddingRight = '';\n        document.getElementById('footer').style.paddingRight = '';\n        document.getElementById('scrollTopBtn').style.marginRight = '';\n      }\n    }\n  }, [isModalOpen, scrollBarWidth]);\n\n  return (\n    <div\n      className={styles.container}\n      id='container'\n    >\n      <Snackbar />\n      {children}\n    </div>\n  );\n};\n\nexport default Container;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport styles from './Modal.module.css';\n\nconst Modal = ({\n  isModalActive,\n  modalKey,\n  modalTitle,\n  acceptBtnHandler,\n  acceptBtnTitle,\n  rejectBtnHandler,\n  rejectBtnTitle,\n  closeModalHandler,\n  componentUnmountFunc,\n  children,\n}) => {\n  const isModalOpen = useSelector((state) => state.contacts.isModalOpen);\n  const isModalAcceptBtnDissabled = useSelector((state) => state.contacts.isModalAcceptBtnDissabled);\n  const reduxDispatch = useDispatch();\n\n  useEffect(()=> {\n    if (!isModalActive) return;\n    document.body.style.overflow = 'hidden';\n    return () => {\n      if (componentUnmountFunc) componentUnmountFunc();\n    };\n  }, [isModalActive, componentUnmountFunc, isModalOpen, reduxDispatch]);\n\n  return isModalActive ?\n    (\n      <div className={styles.modalWrapper}>\n        <div className={styles.modal}>\n          <div className={styles.modalHeader}>\n            <h2 className={styles.modalTitle}>{modalTitle}</h2>\n            <button\n              className={styles.btnClose}\n              onClick = {closeModalHandler}\n            >\n              <span className={styles.closeSymb}>&times;</span>\n            </button>\n          </div>\n          <div className={styles.modalContent}>\n            {children}\n          </div>\n          <div className={styles.hrLine}><hr /></div>\n          <div className={styles.modalFooter}>\n            <button\n              className={styles.btn}\n              disabled={isModalAcceptBtnDissabled[modalKey]}\n              onClick = {acceptBtnHandler}\n            >\n              {acceptBtnTitle}\n            </button>\n            <button\n              className={styles.btnDanger}\n              onClick = {rejectBtnHandler}\n            >\n              {rejectBtnTitle}\n            </button>\n          </div>\n        </div>\n        <div\n          className={styles.modalLayout}\n          onClick = {closeModalHandler}\n        >\n        </div>\n      </div>\n    ) : null;\n};\n\nModal.propTypes = {\n  isModalActive: PropTypes.bool.isRequired,\n  modalKey: PropTypes.string.isRequired,\n  modalTitle: PropTypes.string,\n  acceptBtnHandler: PropTypes.func.isRequired,\n  acceptBtnTitle: PropTypes.string,\n  rejectBtnHandler: PropTypes.func.isRequired,\n  rejectBtnTitle: PropTypes.string,\n  closeModalHandler: PropTypes.func.isRequired,\n  componentUnmountFunc: PropTypes.func,\n};\n\nModal.defaultProps = {\n  modalTitle: 'Modal window',\n  acceptBtnTitle: 'Accept',\n  rejectBtnTitle: 'Reject',\n};\n\nexport default Modal;\n","import { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Modal, AddEditForm } from '../../components';\n\nimport {\n  changeModalStatus,\n  addContactInfo,\n  clearContactInfo,\n  changePhoneValid,\n  changeEmailValid,\n  changeModalAcceptBtnStatus,\n  clrAddFieldValues,\n  addFieldToForm,\n  deleteFieldFromForm,\n  setCurrentFieldKey,\n} from '../../store/contactsSlice';\n\nimport {\n  formValidator,\n  emailValidator,\n  phoneValidator,\n} from '../../utils/utils';\n\nimport styles from './Form.module.css';\n\nconst Form = () => {\n  const reduxDispatch = useDispatch();\n  const isModalOpen = useSelector((state) => state.contacts.isModalOpen);\n  const contact = useSelector((state) => state.contacts.addContactInfo);\n  const { phone: isPhoneValid, email: isEmailValid } = useSelector((state) => state.contacts.isInputsValid);\n  const fieldTitle = useSelector((state) => state.contacts.additionalFieldTitle);\n  const fieldValue = useSelector((state) => state.contacts.additionalFieldValue);\n  const currentFieldKey = useSelector((state) => state.contacts.currentFieldKey);\n  const additionalFields = useSelector((state) => state.contacts.additionalFields);\n\n  useEffect(() => {\n    return () => {\n      reduxDispatch(clearContactInfo());\n    };\n  }, [reduxDispatch]);\n\n  const clearAddFieldValues = useCallback(() => reduxDispatch(clrAddFieldValues()), [reduxDispatch]);\n\n  return (\n    <div className={styles.container}>\n      <form className={styles.formWrapper}>\n        <label\n          className={styles.label}\n        >\n          name:\n          <input\n            className={styles.input}\n            type='text'\n            placeholder='name'\n            name='name'\n            value={contact.name}\n            onChange = {(e) => {\n              reduxDispatch(addContactInfo({ name: e.target.name, value: e.target.value }));\n              reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: formValidator( e.target.value, contact.email, contact.phone, isEmailValid, isPhoneValid) }));\n            }}\n          />\n        </label>\n        <label\n          className={styles.label}\n        >\n          surname:\n          <input\n            className={styles.input}\n            type='text'\n            placeholder='surname'\n            name='surname'\n            value={contact.surname}\n            onChange = {(e) => {\n              reduxDispatch(addContactInfo({ name: e.target.name, value: e.target.value }));\n              reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: formValidator(e.target.value, contact.email, contact.phone, isEmailValid, isPhoneValid) }));\n            }}\n          />\n        </label>\n        <label\n          className={styles.label}\n          data-is-valid={isEmailValid}\n          data-is-empty={contact.email ? 'false' : 'true'}\n        >\n          email:\n          <input\n            className={styles.input}\n            type='email'\n            placeholder='email'\n            name='email'\n            value={contact.email}\n            data-is-valid={isEmailValid}\n            data-is-empty={contact.email ? 'false' : 'true'}\n            onChange = {(e) => {\n              reduxDispatch(addContactInfo({ name: e.target.name, value: e.target.value }));\n              reduxDispatch(changeEmailValid(emailValidator(e.target.value, contact.phone, isPhoneValid, contact.name, contact.surname, 'modal1')));\n            }}\n          />\n        </label>\n        <label\n          className={styles.label}\n          data-is-valid={isPhoneValid}\n          data-is-empty={contact.phone ? 'false' : 'true'}\n        >\n          phone:\n          <input\n            className={styles.input}\n            type='tel'\n            placeholder='phone'\n            name='phone'\n            value={contact.phone}\n            data-is-valid={isPhoneValid}\n            data-is-empty={contact.phone ? 'false' : 'true'}\n            onChange = {(e) => {\n              reduxDispatch(addContactInfo({ name: e.target.name, value: e.target.value }));\n              reduxDispatch(changePhoneValid(phoneValidator(e.target.value, contact.email, isEmailValid, contact.name, contact.surname, 'modal1')));\n            }}\n          />\n        </label>\n        {additionalFields.length ?\n          additionalFields.map(additionalField => {\n            return (\n              <label\n                className={styles.label}\n                key = {additionalField}\n              >\n                {additionalField}:\n                <div className={styles.addInputsWrapper}>\n                  <input\n                    className={styles.input}\n                    type='text'\n                    placeholder={additionalField}\n                    name={additionalField}\n                    value={contact[additionalField]}\n                    onChange = {(e) =>{\n                      e.preventDefault();\n                      reduxDispatch(addContactInfo({ name: additionalField, value: e.target.value }));\n                    }}\n                  />\n                  <button\n                    className={styles.btnClose}\n                    onClick = {(e) => {\n                      e.preventDefault();\n                      reduxDispatch(setCurrentFieldKey({ currentFieldKey: additionalField }));\n                      reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: false }));\n                      reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: true }));\n                    }}\n                  >\n                    <span className={styles.closeSymb}>&times;</span>\n                  </button>\n                </div>\n              </label>\n            );\n          }) : null\n        }\n      </form>\n      <button\n        className={styles.btn}\n        onClick = {() => reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: true }))}\n      >\n        Add field\n      </button>\n\n      <Modal\n        isModalActive = {isModalOpen.modal3}\n        modalKey = {'modal3'}\n        modalTitle = {'Add new field'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(addFieldToForm({ fieldTitle: fieldTitle, fieldValue: fieldValue }));\n          reduxDispatch(changeEmailValid(emailValidator(contact.email, contact.phone, isPhoneValid, contact.name, contact.surname, 'modal1')));\n          reduxDispatch(changePhoneValid(phoneValidator(contact.phone, contact.email, isEmailValid, contact.name, contact.surname, 'modal1')));\n          reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'Add field'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeEmailValid(emailValidator(contact.email, contact.phone, isPhoneValid, contact.name, contact.surname, 'modal1')));\n          reduxDispatch(changePhoneValid(phoneValidator(contact.phone, contact.email, isEmailValid, contact.name, contact.surname, 'modal1')));\n          reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: true }));\n        }}\n        rejectBtnTitle = {'Cancel'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: true }));\n        }}\n        componentUnmountFunc = {clearAddFieldValues}\n      >\n        <AddEditForm\n          modalKey = {'modal3'}\n          target = {contact}\n        />\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal4}\n        modalKey = {'modal4'}\n        modalTitle = {'Delete field'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(deleteFieldFromForm({ key: currentFieldKey }));\n          reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'Yes'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: true }));}}\n        rejectBtnTitle = {'No'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Delete field: {currentFieldKey} ?</h3>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default Form;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  changeModalStatus,\n  changeModalAcceptBtnStatus,\n  addContact,\n  launchSnackbar,\n} from '../../store/contactsSlice';\n\nimport { Modal, Form } from '../../components';\nimport styles from './AddContact.module.css';\n\nconst AddContact = () => {\n  const reduxDispatch = useDispatch();\n  const isModalOpen = useSelector((state) => state.contacts.isModalOpen);\n  const contact = useSelector((state) => state.contacts.addContactInfo);\n\n  return(\n    <div className={styles.container}>\n      <button\n        className={styles.btn}\n        onClick = {() => reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: true }))}\n      >\n        Add new contact\n      </button>\n\n      <Modal\n        isModalActive = {isModalOpen.modal1}\n        modalKey = {'modal1'}\n        modalTitle = {'Add new contact'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(addContact());\n          reduxDispatch(launchSnackbar({\n            message: `Contact ${contact.name} ${contact.surname} been added to Contacts list`,\n            options: {\n              duration: 8000,\n              position: 'top',\n              manualClose: true,\n            },\n          }));\n          reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'Add contact'}\n        rejectBtnHandler = {() => {\n          if (Object.values(contact).filter(el => el !== '').length) {\n            reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: true }));\n            reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: false }));\n          } else {\n            reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n            reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n          }\n        }}\n        rejectBtnTitle = {'Cancel'}\n        closeModalHandler = {() => {\n          if (Object.values(contact).filter(el => el !== '').length) {\n            reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: true }));\n            reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: false }));\n          } else {\n            reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n            reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n          }\n        }}\n      >\n        <Form />\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal2}\n        modalKey = {'modal2'}\n        modalTitle = {'Discard changes'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'No'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: true }));\n          reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n        }}\n        rejectBtnTitle = {'Yes'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Discard changes ? To continue edit press `No` or close modal window.</h3>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default AddContact;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  changeModalAcceptBtnStatus,\n  changeFieldExistStatus,\n  addFieldTitle,\n  addFieldValue,\n  setAddFieldType,\n  changeEmailValid,\n  changePhoneValid,\n} from '../../store/contactsSlice';\n\nimport styles from './AddEditForm.module.css';\n\nimport {\n  addFieldEmailValidator,\n  addFieldPhoneValidator,\n  getFieldType,\n} from '../../utils/utils';\n\nconst AddEditForm = ({\n  modalKey,\n  target,\n}) => {\n  const reduxDispatch = useDispatch();\n  const isFieldExist = useSelector((state) => state.contacts.isFieldExist);\n  const currentFieldKey = useSelector((state) => state.contacts.currentFieldKey);\n  const { phone: isPhoneValid, email: isEmailValid } = useSelector((state) => state.contacts.isInputsValid);\n  const fieldTitle = useSelector((state) => state.contacts.additionalFieldTitle);\n  const fieldValue = useSelector((state) => state.contacts.additionalFieldValue);\n  const fieldType = useSelector((state) => state.contacts.additionalFieldType);\n\n  useEffect(() => {\n    reduxDispatch(setAddFieldType({ additionalFieldType: getFieldType(fieldTitle) }));\n  }, [reduxDispatch, fieldTitle]);\n\n  return (\n    <div className={styles.wrapper}>\n      <label\n        className={styles.label}\n        data-is-uniq={!isFieldExist}\n        data-is-empty={fieldTitle ? 'false' : 'true'}\n      >\n      Field title:\n        <input\n          className={styles.input}\n          type='text'\n          placeholder='Field title'\n          name='fieldTitle'\n          value={fieldTitle}\n          data-is-uniq={!isFieldExist}\n          data-is-empty={fieldTitle ? 'false' : 'true'}\n          onChange = {(e) => {\n            reduxDispatch(addFieldTitle({ additionalFieldTitle: e.target.value }));\n            if (Object.keys(target).map(key => key.toLowerCase().trim()).includes(e.target.value.toLowerCase().trim()) && e.target.value !== currentFieldKey) {\n              reduxDispatch(changeFieldExistStatus({ fieldExistStatus: true }));\n              reduxDispatch(changeModalAcceptBtnStatus({ key: modalKey, acceptBtnStatus: true }));\n              return;\n            }\n            if (isFieldExist) reduxDispatch(changeFieldExistStatus({ fieldExistStatus: false }));\n            if (getFieldType(e.target.value) === 'other' || !fieldValue) {\n              reduxDispatch(changeModalAcceptBtnStatus({ key: modalKey, acceptBtnStatus: e.target.value ? false : true }));\n              return;\n            }\n            getFieldType(e.target.value) === 'email' ?\n              reduxDispatch(changeEmailValid(addFieldEmailValidator(fieldValue, modalKey, e.target.value, false))) :\n              reduxDispatch(changePhoneValid(addFieldPhoneValidator(fieldValue, modalKey, e.target.value, false)));\n          }}\n        />\n      </label>\n      <label\n        className={styles.label}\n        data-is-valid={fieldType === 'email' ? isEmailValid : fieldType === 'phone' ? isPhoneValid : ''}\n        data-is-empty={fieldType === 'email' || fieldType === 'phone' ? fieldValue ? 'false' : 'true' : ''}\n      >\n        Field value:\n        <input\n          className={styles.input}\n          type='text'\n          placeholder='Field value'\n          name='fieldValue'\n          value={fieldValue}\n          data-is-valid={fieldType === 'email' ? isEmailValid : fieldType === 'phone' ? isPhoneValid : ''}\n          data-is-empty={fieldType === 'email' || fieldType === 'phone' ? fieldValue ? 'false' : 'true' : ''}\n          onChange = {(e) => {\n            reduxDispatch(addFieldValue({ additionalFieldValue: e.target.value }));\n            if (fieldType === 'other') reduxDispatch(changeModalAcceptBtnStatus({ key: modalKey, acceptBtnStatus: (e.target.value && fieldTitle && !isFieldExist) || (fieldTitle && !isFieldExist) ? false : true }));\n            if (fieldType === 'email') reduxDispatch(changeEmailValid(addFieldEmailValidator(e.target.value, modalKey, fieldTitle, isFieldExist)));\n            if (fieldType === 'phone') reduxDispatch(changePhoneValid(addFieldPhoneValidator(e.target.value, modalKey, fieldTitle, isFieldExist)));\n          }}\n        />\n      </label>\n    </div>\n  );\n};\n\nAddEditForm.propTypes = {\n  modalKey: PropTypes.string.isRequired,\n  target: PropTypes.object.isRequired,\n};\n\nexport default AddEditForm;\n","import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  setSnackbarWidth,\n  setSnackbarHeight,\n  closeSnackbar,\n} from '../../store/contactsSlice';\n\nimport styles from './Snackbar.module.css';\n\nconst Snackbar = () => {\n  const reduxDispatch = useDispatch();\n  const { message, width, height, isActive } = useSelector((state) => state.contacts.snackbar);\n  const { manualClose, position } = useSelector((state) => state.contacts.snackbar.options);\n\n  const measuredRef = useCallback(node => {\n    if (node !== null) {\n      position === 'top' || position === 'bottom' ?\n        reduxDispatch(setSnackbarHeight({ height: node.offsetHeight })) :\n        reduxDispatch(setSnackbarWidth({ width: node.offsetWidth }));\n    }\n  }, [position, reduxDispatch]);\n\n  const hideStyles = new Map ([\n    ['top', { top: `-${height}px` }],\n    ['bottom', { bottom: `-${height}px` }],\n    ['left', { left: `-${width}px` }],\n    ['right', { right: `-${width}px` }],\n  ]);\n\n  return (\n    <div\n      className={styles.container}\n      ref={measuredRef}\n      data-is-active={isActive}\n      data-position={position}\n      data-manual-close={manualClose}\n      style={!isActive ? hideStyles.get(position) : {} }\n      onClick = {manualClose ? () => reduxDispatch(closeSnackbar()) : null}\n    >\n      <h3 className={styles.title}>{message}</h3>\n    </div>\n  );\n};\n\nexport default Snackbar;\n","import { useState, useEffect } from 'react';\n\nimport { IconShevronUp } from '../index';\n\nimport styles from './ScrollTop.module.css';\n\nconst ScrollTop = () => {\n  const [isScrollingDown, setScrollingDown] = useState(false);\n\n  useEffect(() => {\n    const parrentNode = document.getElementById('scrollTop').parentElement;\n    const rectOfParrentNode = parrentNode.getBoundingClientRect();\n    const onScroll = (e) => {\n      e.target.documentElement.scrollTop > rectOfParrentNode.top + 100 ? setScrollingDown(true) : setScrollingDown(false);\n    };\n    window.addEventListener('scroll', onScroll);\n\n    return () => window.removeEventListener('scroll', onScroll);\n  }, []);\n\n  const onClickHandle = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <div\n      className={styles.scrollTop}\n      style={!isScrollingDown ? { visibility: 'hidden' } : { visibility: 'visible' }}\n      id='scrollTop'\n    >\n      <button\n        className={styles.scrollTopBtn}\n        id='scrollTopBtn'\n        onClick = {onClickHandle}\n      >\n        <IconShevronUp color='#ffffff'/>\n      </button>\n    </div>\n  );\n};\n\nexport default ScrollTop;\n","const IconShevronUp = ({\n  width = '25',\n  height = '25',\n  color = 'currentColor',\n}) => {\n  return (\n    <svg\n      width={width}\n      height={height}\n      aria-hidden='true'\n      focusable='false'\n      data-prefix='fas'\n      data-icon='chevron-up'\n      role='img'\n      xmlns='http://www.w3.org/2000/svg'\n      viewBox='0 0 448 512'\n    >\n      <path\n        fill={color}\n        d='M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z'\n      >\n      </path>\n    </svg>\n  );\n};\n\nexport default IconShevronUp;\n","import { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  changeModalStatus,\n  changeModalAcceptBtnStatus,\n  changeSaveBtnStatus,\n  addFieldTitle,\n  addFieldValue,\n  setCurrentFieldKey,\n  editCurrentContactField,\n  deleteFieldFromCurrentContact,\n  addFieldToCurrentContact,\n  clrAddFieldValues,\n  changeEmailValid,\n  changePhoneValid,\n  changeCurrentContactStateHistory,\n  undoCurrentContactStateHistory,\n  redoCurrentContactStateHistory,\n  resetCurrentContactStateHistory,\n  changeUndoBtnStatus,\n  changeRedoBtnStatus,\n  updateContact,\n  launchSnackbar,\n} from '../../store/contactsSlice';\n\nimport { Modal, AddEditForm, ScrollTop } from '../../components';\n\nimport styles from './ContactInfoScreen.module.css';\n\nimport {\n  addFieldEmailValidator,\n  addFieldPhoneValidator,\n  getFieldType,\n} from '../../utils/utils';\n\nconst ContactInfoScreen = ({ history }) => {\n  const reduxDispatch = useDispatch();\n  const isModalOpen = useSelector((state) => state.contacts.isModalOpen);\n  const contactsList = useSelector((state) => state.contacts.contactsList);\n  const currentContact = useSelector((state) => state.contacts.currentContact);\n  const currentFieldKey = useSelector((state) => state.contacts.currentFieldKey);\n  const isSaveBtnDissabled = useSelector((state) => state.contacts.isSaveBtnDissabled);\n  const isUndoBtnDissabled = useSelector((state) => state.contacts.isUndoBtnDissabled);\n  const isRedoBtnDissabled = useSelector((state) => state.contacts.isRedoBtnDissabled);\n  const fieldTitle = useSelector((state) => state.contacts.additionalFieldTitle);\n  const fieldValue = useSelector((state) => state.contacts.additionalFieldValue);\n  const currentContactHistory = useSelector((state) => state.contacts.currentContactHistory);\n\n  const clearAddFieldValues = useCallback(() => reduxDispatch(clrAddFieldValues()), [reduxDispatch]);\n\n  const contactFromList = contactsList.filter(contact => contact.id === currentContact.id)[0];\n\n  useEffect(() => {\n    if (currentContactHistory.prev.length) {\n      reduxDispatch(changeSaveBtnStatus({ saveBtnStatus: false }));\n      reduxDispatch(changeUndoBtnStatus({ undoBtnStatus: false }));\n    }\n    if (currentContactHistory.next.length) reduxDispatch(changeRedoBtnStatus({ redoBtnStatus: false }));\n  }, [reduxDispatch, currentContactHistory]);\n\n  useEffect(() => {\n    if (Object.keys(currentContact).length > 2) return;\n    if (!Object.keys(currentContact).filter(key => key !== 'selected' && key !== 'id').length) {\n      if(!isSaveBtnDissabled) reduxDispatch(changeSaveBtnStatus({ saveBtnStatus: true }));\n      reduxDispatch(launchSnackbar({\n        message: 'Contact details cannot be empty. Add at least one field to save changes.',\n        options: {\n          duration: 10000,\n          position: 'left',\n          manualClose: true,\n        },\n      }));\n    }\n  }, [currentContact, isSaveBtnDissabled, reduxDispatch]);\n\n  return (\n    <div className={styles.wrapper}>\n\n      <ScrollTop />\n\n      <div className={styles.controlsWrapper}>\n        <button\n          className={styles.btn}\n          onClick = {(e) => {\n            if (!isSaveBtnDissabled) {\n              reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', acceptBtnStatus: false }));\n              reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: true }));\n              return;\n            }\n            if (!Object.keys(currentContact).filter(key => key !== 'selected' && key !== 'id').length) {\n              reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', acceptBtnStatus: false }));\n              reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: true }));\n              return;\n            }\n            history.push('/');\n            reduxDispatch(resetCurrentContactStateHistory());\n\n          }}\n        >\n        Back to contacts list\n        </button>\n        <h1 className={styles.title}>Contact {currentContact.name} {currentContact.surname} details</h1>\n        <div>\n          {Object.entries(currentContact).map(contact => {\n            if (contact[0] === 'selected' || contact[0] === 'id') return null;\n            return (\n              <label\n                className={styles.label}\n                key = {contact[0]}\n              >\n                {contact[0]}:\n                <div className={styles.addInputsWrapper}>\n                  <input\n                    className={styles.contactInfoInput}\n                    type='text'\n                    placeholder={contact[0]}\n                    name={contact[0]}\n                    value={currentContact[contact[0]]}\n                    readOnly\n                  />\n                  <div className={styles.btnWrapper}>\n                    <button\n                      className={styles.btn}\n                      onClick = {() => {\n                        reduxDispatch(setCurrentFieldKey({ currentFieldKey: contact[0] }));\n                        reduxDispatch(addFieldTitle({ additionalFieldTitle: contact[0] }));\n                        reduxDispatch(addFieldValue({ additionalFieldValue: contact[1] }));\n                        if (getFieldType(contact[0]) === 'email') reduxDispatch(changeEmailValid(addFieldEmailValidator(contact[1], 'modal3', contact[0])));\n                        if (getFieldType(contact[0]) === 'phone') reduxDispatch(changePhoneValid(addFieldPhoneValidator(contact[1], 'modal3', contact[0])));\n                        if (getFieldType(contact[0]) === 'other') reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: false }));\n                        reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: true }));\n                      }}\n                    >\n                Edit\n                    </button>\n                    <button\n                      className={styles.btnDanger}\n                      onClick = {(e) => {\n                        reduxDispatch(setCurrentFieldKey({ currentFieldKey: contact[0] }));\n                        reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: false }));\n                        reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: true }));\n                      }}\n                    >\n                Delete\n                    </button>\n                  </div>\n                </div>\n              </label>\n            );\n          })}\n        </div>\n        <button\n          className={styles.btn}\n          onClick = {() => reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: true }))}\n        >\n        Add field\n        </button>\n        <div className={styles.hrLine}><hr /></div>\n        <div className={styles.btnWrapper}>\n          <button\n            className={styles.btn}\n            disabled={isSaveBtnDissabled}\n            onClick = {() => {\n              reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: false }));\n              reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: true }));\n            }}\n          >\n          Save changes\n          </button>\n          <button\n            className={styles.btn}\n            disabled={isUndoBtnDissabled}\n            onClick = {() => reduxDispatch(undoCurrentContactStateHistory())}\n          >\n          Undo\n          </button>\n          <button\n            className={styles.btn}\n            disabled={isRedoBtnDissabled}\n            onClick = {() => reduxDispatch(redoCurrentContactStateHistory())}\n          >\n          Redo\n          </button>\n        </div>\n      </div>\n\n      <Modal\n        isModalActive = {isModalOpen.modal1}\n        modalKey = {'modal1'}\n        modalTitle = {'Add new field'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(addFieldToCurrentContact({ fieldTitle: fieldTitle, fieldValue: fieldValue }));\n          reduxDispatch(changeCurrentContactStateHistory());\n          reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'Add field'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n        }}\n        rejectBtnTitle = {'Cancel'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal1', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal1', acceptBtnStatus: true }));\n        }}\n        componentUnmountFunc = {clearAddFieldValues}\n      >\n        <AddEditForm\n          modalKey = {'modal1'}\n          target = {currentContact}\n        />\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal2}\n        modalKey = {'modal2'}\n        modalTitle = {'Delete field'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(deleteFieldFromCurrentContact({ key: currentFieldKey }));\n          reduxDispatch(changeCurrentContactStateHistory());\n          reduxDispatch(setCurrentFieldKey({ currentFieldKey: '' }));\n          reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'Yes'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(setCurrentFieldKey({ currentFieldKey: '' }));\n          reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: true }));}}\n        rejectBtnTitle = {'No'}\n        closeModalHandler = {() => {\n          reduxDispatch(setCurrentFieldKey({ currentFieldKey: '' }));\n          reduxDispatch(changeModalStatus({ key: 'modal2', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal2', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Delete field: {currentFieldKey} ?</h3>\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal3}\n        modalKey = {'modal3'}\n        modalTitle = {'Edit field'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(editCurrentContactField({ fieldCurrentTitle: currentFieldKey, fieldNewTitle: fieldTitle, fieldValue: fieldValue }));\n          reduxDispatch(changeCurrentContactStateHistory());\n          reduxDispatch(setCurrentFieldKey({ currentFieldKey: '' }));\n          reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'Ok'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(setCurrentFieldKey({ currentFieldKey: '' }));\n          reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: true }));\n        }}\n        rejectBtnTitle = {'Cancel'}\n        closeModalHandler = {() => {\n          reduxDispatch(setCurrentFieldKey({ currentFieldKey: '' }));\n          reduxDispatch(changeModalStatus({ key: 'modal3', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal3', acceptBtnStatus: true }));\n        }}\n        componentUnmountFunc = {clearAddFieldValues}\n      >\n        <AddEditForm\n          modalKey = {'modal3'}\n          target = {currentContact}\n        />\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal4}\n        modalKey = {'modal4'}\n        modalTitle = {'Update contact'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(updateContact());\n          reduxDispatch(changeSaveBtnStatus({ saveBtnStatus: true }));\n          reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: true }));\n          reduxDispatch(launchSnackbar({\n            message: `Contact ${currentContact.name ? currentContact.name : ''} ${currentContact.surname ? currentContact.surname : ''} been updated`,\n            options: {\n              duration: 8000,\n              position: 'top',\n              manualClose: true,\n            },\n          }));\n        }}\n        acceptBtnTitle = {'Yes'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: true }));\n        }}\n        rejectBtnTitle = {'No'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal4', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal4', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Update contact {currentContact.name} {currentContact.surname} ?</h3>\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal5}\n        modalKey = {'modal5'}\n        modalTitle = {'Save changes'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(updateContact());\n          reduxDispatch(resetCurrentContactStateHistory());\n          reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', acceptBtnStatus: true }));\n          reduxDispatch(launchSnackbar({\n            message: `Contact ${currentContact.name ? currentContact.name : ''} ${currentContact.surname ? currentContact.surname : ''} details changes been saved`,\n            options: {\n              duration: 8000,\n              position: 'top',\n              manualClose: true,\n            },\n          }));\n          history.push('/');\n        }}\n        acceptBtnTitle = {'Yes'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(resetCurrentContactStateHistory());\n          reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', acceptBtnStatus: true }));\n          history.push('/');\n        }}\n        rejectBtnTitle = {'No'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Save contact {currentContact.name} {currentContact.surname} details changes before closing contact details ?</h3>\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal6}\n        modalKey = {'modal6'}\n        modalTitle = {'Discard changes'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', acceptBtnStatus: true }));\n        }}\n        acceptBtnTitle = {'No'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(resetCurrentContactStateHistory());\n          reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', acceptBtnStatus: true }));\n          reduxDispatch(launchSnackbar({\n            message: `All contact ${contactFromList.name ? contactFromList.name : ''} ${contactFromList.surname ? contactFromList.surname : ''} details changes been discarded`,\n            options: {\n              duration: 8000,\n              position: 'top',\n              manualClose: true,\n            },\n          }));\n          history.push('/');\n        }}\n        rejectBtnTitle = {'Yes'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Discard all contact details changes? To continue edit contact details press `No` or close modal window (to save changes add at least one field).</h3>\n      </Modal>\n\n    </div>\n  );\n};\n\nContactInfoScreen.propTypes = {\n  history: PropTypes.object.isRequired,\n};\n\nexport default ContactInfoScreen;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  changeModalStatus,\n  changeModalAcceptBtnStatus,\n  setCurrentContact,\n  setContactSelected,\n  setAllContactsSelected,\n  changeIsContactsSelected,\n  resetSelectedContacts,\n  deleteContact,\n  deleteSelectedContacts,\n  initCurrentContactStateHistory,\n} from '../../store/contactsSlice';\n\nimport { Modal, AddContact, ScrollTop } from '../../components';\n\nimport styles from './ContactsListScreen.module.css';\n\nconst ContactsListScreen = ({ history }) => {\n  const reduxDispatch = useDispatch();\n  const isModalOpen = useSelector((state) => state.contacts.isModalOpen);\n  const contactsList = useSelector((state) => state.contacts.contactsList);\n  const { all: allSelected, some: someSelected } = useSelector((state) => state.contacts.isContactsSelected);\n  const currentContact = useSelector((state) => state.contacts.currentContact);\n\n  useEffect(() => {\n    const selectedContactsList = contactsList.filter(el => el.selected === true).length;\n    if (selectedContactsList) {\n      if (selectedContactsList === contactsList.length) {\n        reduxDispatch(changeIsContactsSelected(({ key: 'all', value: true })));\n        if (someSelected) reduxDispatch(changeIsContactsSelected(({ key: 'some', value: false })));\n      } else {\n        reduxDispatch(changeIsContactsSelected(({ key: 'some', value: true })));\n        if (allSelected) reduxDispatch(changeIsContactsSelected(({ key: 'all', value: false })));\n      }\n    } else {\n      if (someSelected) reduxDispatch(changeIsContactsSelected(({ key: 'some', value: false })));\n      if (allSelected) reduxDispatch(changeIsContactsSelected(({ key: 'all', value: false })));\n    }\n  }, [contactsList, someSelected, allSelected, reduxDispatch]);\n\n  return (\n    <div className={styles.wrapper}>\n\n      <ScrollTop />\n\n      <h1 className={styles.title}>Contacts list</h1>\n      <div className={styles.controlsWrapper}>\n        <div className={styles.selectBtns}>\n          <button\n            className={styles.btn}\n            disabled={allSelected}\n            onClick = {() => {\n              reduxDispatch(setAllContactsSelected());\n            }}\n          >\n          Select all contacts\n          </button>\n          <button\n            className={styles.btn}\n            disabled={allSelected || someSelected ? false : true}\n            onClick = {() => {\n              reduxDispatch(resetSelectedContacts());\n            }}\n          >\n          Unselect contacts\n          </button>\n          <button\n            className={styles.btnDanger}\n            disabled={allSelected || someSelected ? false : true}\n            onClick = {() => {\n              reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', modalStatus: false }));\n              reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: true }));\n            }}\n          >\n          Delete selected contacts\n          </button>\n        </div>\n\n        <AddContact />\n\n      </div>\n      <div className={styles.contactsList}>\n        {contactsList ?\n          contactsList.map((contact, idx) => {\n            return (\n              <div\n                className={styles.contactInfoWrapper}\n                key = {contact.id}\n              >\n                <div className={styles.contactInfo}>\n                  <h3 className={styles.contactName}>{idx + 1}. {contact.name} {contact.surname}</h3>\n                  <p className={styles.contactContacts}>{contact.email ? `e-mail: ${contact.email}` : ''}</p>\n                  <p className={styles.contactContacts}>{contact.phone ? `phone: ${contact.phone}` : ''}</p>\n                </div>\n                <div className={styles.btnWrapper}>\n                  <input\n                    className={styles.checkbox}\n                    type='checkbox'\n                    id={contact.id}\n                    checked={contact.selected}\n                    onChange = {() => reduxDispatch(setContactSelected({ contactId: contact.id }))}\n                  />\n                  <label\n                    className={styles.checkboxLabel}\n                    htmlFor={contact.id}\n                  >\n                  </label>\n                  <button\n                    className={styles.btn}\n                    onClick = {() => {\n                      reduxDispatch(setCurrentContact({ contactId: contact.id }));\n                      reduxDispatch(resetSelectedContacts());\n                      reduxDispatch(initCurrentContactStateHistory());\n                      history.push('/info');\n                    }}\n                  >\n                  View details / Edit\n                  </button>\n                  <button\n                    className={styles.btnDanger}\n                    onClick = {() => {\n                      reduxDispatch(setCurrentContact({ contactId: contact.id }));\n                      reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', modalStatus: false }));\n                      reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: true }));\n                    }}\n                  >\n                  Delete\n                  </button>\n                </div>\n              </div>\n            );\n          }) : <h3>Contats list is empty</h3>\n        }\n      </div>\n\n      <Modal\n        isModalActive = {isModalOpen.modal5}\n        modalKey = {'modal5'}\n        modalTitle = {'Delete selected contacts'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(deleteSelectedContacts());\n          reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', modalStatus: true }));\n        }}\n        acceptBtnTitle = {'Yes'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', modalStatus: true }));\n        }}\n        rejectBtnTitle = {'No'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal5', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal5', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Delete all selected contacts ?</h3>\n      </Modal>\n\n      <Modal\n        isModalActive = {isModalOpen.modal6}\n        modalKey = {'modal6'}\n        modalTitle = {'Delete contact'}\n        acceptBtnHandler = {() => {\n          reduxDispatch(deleteContact({ contactId: currentContact.id }));\n          reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', modalStatus: true }));\n        }}\n        acceptBtnTitle = {'Yes'}\n        rejectBtnHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', modalStatus: true }));\n        }}\n        rejectBtnTitle = {'No'}\n        closeModalHandler = {() => {\n          reduxDispatch(changeModalStatus({ key: 'modal6', modalStatus: false }));\n          reduxDispatch(changeModalAcceptBtnStatus({ key: 'modal6', acceptBtnStatus: true }));\n        }}\n      >\n        <h3>Delete contact {currentContact.name} {currentContact.surname} ?</h3>\n      </Modal>\n\n    </div>\n  );\n};\n\nContactsListScreen.propTypes = {\n  history: PropTypes.object.isRequired,\n};\n\nexport default ContactsListScreen;\n","import { Switch, Route } from 'react-router-dom';\n\nimport { ContactsListScreen, ContactInfoScreen } from './screens';\n\nexport const RouterView = () => {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        component={ContactsListScreen}\n      />\n\n      <Route\n        path=\"/info\"\n        component={ContactInfoScreen}\n      />\n\n      <Route path=\"*\">\n        <div>404 Not Found</div>\n      </Route>\n    </Switch>\n  );\n};\n","import {\n  Header,\n  Footer,\n  Container,\n} from './components';\nimport { RouterView } from './Router';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Container>\n        <RouterView />\n      </Container>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider as StoreProvider } from 'react-redux';\n\nimport store from './store';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider store = {store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}